@model Dictionary<string, string>
@{
    ViewBag.Title = "Index";
}
<script src="http://libs.baidu.com/jquery/1.9.1/jquery.min.js"></script>
<form id="form1" method="post">
    <div>
        用户名：<input type="text" name="username" /><br />
        <textarea name="content" style="width: 399px; height: 200px;"></textarea>
        <br />
        <br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <input type="submit" value="提交留言" />
    </div>
</form>
<form id="form2" method="post">
    <div>
        用户名：<input type="text" name="username" /><br />
        <textarea name="content" style="width: 399px; height: 200px;"></textarea>
        <br />
        <br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <input type="submit" value="提交留言" />
    </div>
</form>
<div>留言列表</div>
<div>
    @if (Model != null)
    {
        foreach (var item in Model)
        {
            <p>
                @*自动转义html标签*@
                @item.Key+":"+@item.Value
            </p>
        }
    }
</div>

<script>


    $(function () {

        function htmlEncode(value) {
            return $('<div/>').text(value).html();
        }

        $('#form2').submit(function () {

            //用js转义html标签
            var encode = HtmlUtil.htmlEncode($('textarea[name=content]', this).val());
            //$(this).append('<input name="_content" value="' + encode + '">');

            $('textarea[name=content]', this).val(encode);

            //encode = htmlEncode($('textarea[name=content]', this).val());

            //$('textarea[name=content]', this).val(encode);
        });
    });

    var HtmlUtil = {
        /*1.用浏览器内部转换器实现html转码*/
        htmlEncode: function (html) {
            //1.首先动态创建一个容器标签元素，如DIV
            var temp = document.createElement("div");
            //2.然后将要转换的字符串设置为这个元素的innerText(ie支持)或者textContent(火狐，google支持)
            (temp.textContent != undefined) ? (temp.textContent = html) : (temp.innerText = html);
            //3.最后返回这个元素的innerHTML，即得到经过HTML编码转换的字符串了
            var output = temp.innerHTML;
            temp = null;
            return output;
        },
        /*2.用浏览器内部转换器实现html解码*/
        htmlDecode: function (text) {
            //1.首先动态创建一个容器标签元素，如DIV
            var temp = document.createElement("div");
            //2.然后将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)
            temp.innerHTML = text;
            //3.最后返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，即得到经过HTML解码的字符串了。
            var output = temp.innerText || temp.textContent;
            temp = null;
            return output;
        },
        /*3.用正则表达式实现html转码*/
        htmlEncodeByRegExp: function (str) {
            var s = "";
            if (str.length == 0) return "";
            s = str.replace(/&/g, "&amp;");
            s = s.replace(/</g, "&lt;");
            s = s.replace(/>/g, "&gt;");
            s = s.replace(/ /g, "&nbsp;");
            s = s.replace(/\'/g, "&#39;");
            s = s.replace(/\"/g, "&quot;");
            return s;
        },
        /*4.用正则表达式实现html解码*/
        htmlDecodeByRegExp: function (str) {
            var s = "";
            if (str.length == 0) return "";
            s = str.replace(/&amp;/g, "&");
            s = s.replace(/&lt;/g, "<");
            s = s.replace(/&gt;/g, ">");
            s = s.replace(/&nbsp;/g, " ");
            s = s.replace(/&#39;/g, "\'");
            s = s.replace(/&quot;/g, "\"");
            return s;
        }
    };

</script>

